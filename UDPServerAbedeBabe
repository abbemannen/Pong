#include <stdio.h>
#include <SDL.h>
#include <SDL_net.h>
#include <string.h>
#include <stdbool.h>

#define SCREEN_W 1000
#define SCREEN_H 500
#define BALL_SPEED 5
#define PLAYER_SPEED 5

typedef struct player {
	float player_yPos;
	float player_xPos;
} Player;

typedef struct ball {
	float ball_yPos;
	float ball_xPos;
} Ball;

void game_Loop(IPaddress  );

int main(int argc, char** argv[])
{
	IPaddress server_ip;
	IPaddress client_ip;
	UDPsocket serversock;
	UDPpacket *packet;
	char choice[10];

	SDL_Init(SDL_INIT_EVERYTHING);
	SDLNet_Init();

	SDLNet_ResolveHost(&server_ip, NULL, 1234);
	serversock = SDLNet_UDP_Open(1234);
	if (!serversock)
	{
		printf("SDLNet_UDP_Open: %s\n", SDL_GetError());
		exit(2);
	}
	packet = SDLNet_AllocPacket(1024);

	SDL_Window* window = SDL_CreateWindow(
		"Ultra pong",
		SDL_WINDOWPOS_UNDEFINED,
		SDL_WINDOWPOS_UNDEFINED,
		SCREEN_W,
		SCREEN_H,
		0);

	if (!window) {
		printf("Could not create window: %s\n", SDL_GetError());
		return 1;
	}

	SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
	if (!renderer) {
		printf("Could not create renderer: %s\n", SDL_GetError());
		return 1;
	}
	while (1)
	{
		printf("skicka eller ta emot?\n");
		gets(choice);
		if (!strcmp(choice, "skicka"))
		{
			printf("Fill the buffer\n>");
			gets((char *)packet->data);

			packet->address.host = client_ip.host;	// Set the destination host
			packet->address.port = client_ip.port;	// And destination port

			packet->len = strlen((char *)packet->data) + 1;
			SDLNet_UDP_Send(serversock, -1, packet); // This sets the p->channel

			// Quit if packet contains "quit"
			if (!strcmp((char *)packet->data, "quit"))
				return;
		}
		else if (!strcmp(choice, "ta emot"))
		{
			if (SDLNet_UDP_Recv(serversock, packet))
			{
				printf("Du har f책tt ett paket som s채kert inneh책ller n책got bra\n");
				client_ip.host = packet->address.host;
				client_ip.port = packet->address.port;
			}

		}
		else
		{
			printf("NOT A VALID ASS DUDE\n");
		}

	}

	game_Loop();

	SDLNet_FreePacket(packet);
	SDLNet_UDP_Close(serversock);
	SDLNet_Quit();
	SDL_Quit();

	return 0;
}

void game_Loop(){
	Player players[2];

}
